version: '3.8'

# =========================================
# GESTIONMAX SaaS Infrastructure
# =========================================

services:
  # =======================================
  # REVERSE PROXY & LOAD BALANCER
  # =======================================
  traefik:
    image: traefik:v3.0
    container_name: gestionmax_traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@gestionmax.fr"
      - "--certificatesresolvers.letsencrypt.acme.storage=/acme/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8081:8080"
    volumes:
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./traefik/acme:/acme
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`dashboard.gestionmax.fr`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  # =======================================
  # MONITORING & OBSERVABILITY
  # =======================================
  prometheus:
    image: prom/prometheus:latest
    container_name: gestionmax_prometheus
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    ports:
      - "9092:9090"
    networks:
      - monitoring
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`metrics.gestionmax.fr`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  alertmanager:
    image: prom/alertmanager:latest
    container_name: gestionmax_alertmanager
    restart: unless-stopped
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    networks:
      - monitoring
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.alertmanager.rule=Host(`alerts.gestionmax.fr`)"
      - "traefik.http.routers.alertmanager.entrypoints=websecure"
      - "traefik.http.routers.alertmanager.tls.certresolver=letsencrypt"
      - "traefik.http.services.alertmanager.loadbalancer.server.port=9093"

  grafana:
    image: grafana/grafana:latest
    container_name: gestionmax_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-GestionMax2025!}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=dashboard.gestionmax.fr
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.gestionmax.fr:25
      - GF_SMTP_FROM_ADDRESS=grafana@gestionmax.fr
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    ports:
      - "3002:3000"
    networks:
      - monitoring
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`dashboard.gestionmax.fr`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.grafana-compress.compress=true"
      - "traefik.http.routers.grafana.middlewares=grafana-compress"

  node-exporter:
    image: prom/node-exporter:latest
    container_name: gestionmax_node_exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - monitoring

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: gestionmax_cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "8080:8080"
    networks:
      - monitoring

  loki:
    image: grafana/loki:latest
    container_name: gestionmax_loki
    restart: unless-stopped
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    ports:
      - "3100:3100"
    networks:
      - monitoring

  promtail:
    image: grafana/promtail:latest
    container_name: gestionmax_promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml
      - promtail_data:/tmp
    networks:
      - monitoring
    depends_on:
      - loki

  # =======================================
  # DATABASE & STORAGE
  # =======================================
  postgres:
    image: postgres:15-alpine
    container_name: gestionmax_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=gestionmax
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-GestionMax2025!}
      - POSTGRES_DB=gestionmax
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gestionmax"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: gestionmax_postgres_exporter
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=postgresql://gestionmax:${POSTGRES_PASSWORD:-GestionMax2025!}@postgres:5432/gestionmax?sslmode=disable
    ports:
      - "9187:9187"
    networks:
      - backend
      - monitoring
    depends_on:
      - postgres

  redis:
    image: redis:7-alpine
    container_name: gestionmax_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-GestionMax2025!}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: gestionmax_redis_exporter
    restart: unless-stopped
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-GestionMax2025!}
    ports:
      - "9121:9121"
    networks:
      - backend
      - monitoring
    depends_on:
      - redis

  backup:
    image: postgres:15-alpine
    container_name: gestionmax_backup
    restart: unless-stopped
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD:-GestionMax2025!}
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts
    command: >
      sh -c "
      while true; do
        pg_dump -h postgres -U gestionmax gestionmax > /backups/backup_$(date +%Y%m%d_%H%M%S).sql
        find /backups -name '*.sql' -mtime +7 -delete
        sleep 86400
      done"
    networks:
      - backend
    depends_on:
      - postgres

  minio:
    image: minio/minio:latest
    container_name: gestionmax_minio
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-GestionMax2025!}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    networks:
      - backend
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio-api.rule=Host(`storage.gestionmax.fr`)"
      - "traefik.http.routers.minio-api.entrypoints=websecure"
      - "traefik.http.routers.minio-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.minio-api.loadbalancer.server.port=9000"
      - "traefik.http.routers.minio-console.rule=Host(`storage-console.gestionmax.fr`)"
      - "traefik.http.routers.minio-console.entrypoints=websecure"
      - "traefik.http.routers.minio-console.tls.certresolver=letsencrypt"
      - "traefik.http.services.minio-console.loadbalancer.server.port=9001"

  # =======================================
  # STATUS & UPTIME
  # =======================================
  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: gestionmax_uptime
    restart: unless-stopped
    volumes:
      - uptime_data:/app/data
    ports:
      - "3001:3001"
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.uptime.rule=Host(`status.gestionmax.fr`)"
      - "traefik.http.routers.uptime.entrypoints=websecure"
      - "traefik.http.routers.uptime.tls.certresolver=letsencrypt"
      - "traefik.http.services.uptime.loadbalancer.server.port=3001"

# =======================================
# NETWORKS
# =======================================
networks:
  web:
    external: true
  monitoring:
    driver: bridge
  backend:
    driver: bridge

# =======================================
# VOLUMES
# =======================================
volumes:
  prometheus_data:
  alertmanager_data:
  grafana_data:
  postgres_data:
  redis_data:
  minio_data:
  loki_data:
  promtail_data:
  uptime_data: